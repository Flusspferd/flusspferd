// -*- mode:js2; -*-

/** section: Flusspferd Core
 * subprocess
 * 
 * Module to start and handle subprocesses. (popen)
 * 
 * This module is very similar to 
 * [Python's subprocess module](http://docs.python.org/library/subprocess.html).
 * Currently only a implementation for UNIX-like systems is available.
 * 
 * ## Example #
 * 
 *     const subprocess = require('subprocess');
 *     var p = subprocess.popen(["echo", "foo", "bar"], "r")
 *     print(p.communicate().stdout); // -> "foo bar\n"
 *     print(p.poll()); // -> 0 (ok)
 **/

/**
 * subprocess.SIGKILL -> Integer
 * 
 * Signal number to kill a process.
 * 
 * See [[subprocess.Subprocess#sendSignal]] and [[subprocess.Subprocess#kill]].
 **/

/**
 * subprocess.SIGTERM -> Integer
 * 
 * Signal number to terminate a process.
 * 
 * See [[subprocess.Subprocess#sendSignal]] and
 * [[subprocess.Subprocess#terminate]].
 **/

/**
 * subprocess.popen(command[, mode]) -> subprocess.Subprocess
 * subprocess.popen(args[, mode]) -> subprocess.Subprocess
 * subprocess.popen(obj) -> subprocess.Subprocess
 * - command (String): a command passed to `sh -c`
 *   (Similar to
 *   [popen(3)](http://www.kernel.org/doc/man-pages/online/pages/man3/popen.3.html)).
 * - mode (String): `"w"` or `"r"` (see below. Similar to popen(3)).
 *   If no `mode` parameter is passed pipes for stdin, stdout and stderr are
 *   opened.
 * - args (Array): an array containing a command as first param (`argv[0]`) and
 *   arguments passed to the command. This uses execve directly and doesn't pass
 *   the command to a shell first.
 * - obj (Object): an object containing the parameters as properties.
 *   (see below)
 * 
 * Create a new subprocess. Default is to open pipes for stdin, stdout and
 * stderr. Passing `"w"` as `mode` parameter means that *only* a pipe to the
 * subprocess' stdin is opened. Passing `"r"` means that *only* a pipe to the
 * subprocess' stdout is opened.
 * 
 * `popen` accepts an object as parameter and interprets the following
 * properties:
 * - args (`Array`, required): an array like `args` parameter.
 * - executable (`String`, optional): the name of the executable if it
 *   differs from `args[0]`.
 * - cwd (`String`, optional): a pathname. `popen` tries to change to
 *   that directory before executing the subprocess. (Does not fail if
 *   it changing the directory fails!)
 * - stdin (`Boolean`, optional): if true (default) a pipe for stdin is opened.
 * - stdout (`Boolean`, optional): if true (default) a pipe for stdout is
 *   opened.
 * - stderr (`Boolean`, optional): if true (default) a pipe for stderr is
 *   opened.
 * - shell (`Boolean`, optional): if false (default) args is used to directly
 *   start the subprocess (execve). If true a shell is started and `args[0]` 
 *   interpreted as command. The rest of the `args` are passed as arguments to
 *   the shell.
 * 
 * Example
 * 
 *     subprocess.popen({args : [ "echo", "foo", "bar" ], stdin: false, stderr: false })
 **/

/**
 * class subprocess.Subprocess
 * 
 * Provides an interface to a subprocess. Use [[subprocess.popen]] for construction.
 **/

/**
 * subprocess.Subprocess#poll() -> null|Integer
 * 
 * Checks if the subprocess is still running. Returns null if the subprocess is
 * still running or else the returncode as an Integer.
 * 
 * See [[subprocess.Subprocess#returncode]] and [[subprocess.Subprocess#wait]].
 **/

/**
 * subprocess.Subprocess#wait() -> Integer
 * 
 * Waits until the subprocess is finished and returns the returncode as an
 * Integer.
 * 
 * See [[subprocess.Subprocess#returncode]] and [[subprocess.Subprocess#poll]].
 **/

/**
 * subprocess.Subprocess#communicate([input]) -> Object
 * - input (String): data to send to the subprocess.
 * 
 * Write `input` to stdin of the process (if stdin pipe was opened) and read
 * stdout/stderr if opened. Returns an object containing the output of stdout
 * and stderr and the returncode.
 * 
 * This is a safe and fast way to handle the communication.
 **/

/**
 * subprocess.Subprocess#sendSignal(signal) -> undefined
 * - signal (Integer): sends a signal to the subprocess.
 * 
 * Sends a signal to the subprocess. At least [[subprocess.SIGTERM]] and
 * [[subprocess.SIGKILL]] are supported.
 **/

/**
 * subprocess.Subprocess#terminate() -> undefined
 * 
 * Terminate subprocess (similar to `sendSignal(SIGTERM)`).
 * 
 * See [[subprocess.Subprocess#sendSignal]], [[subprocess.Subprocess#kill]]
 * and [[subprocess.SIGTERM]]
 **/

/**
 * subprocess.Subprocess#kill() -> undefined
 * 
 * Kill subprocess (similar to `sendSignal(SIGKILL)`).
 * 
 * See [[subprocess.Subprocess#sendSignal]] and
 * [[subprocess.Subprocess#terminate]] and [[subprocess.SIGKILL]]
 **/

/**
 * subprocess.Subprocess#pid -> Integer
 * 
 * Process ID
 **/

/**
 * subprocess.Subprocess#returncode -> Integer
 * 
 * The return code if the subprocess has finished. If the subprocess
 * was terminated by a signal returncode is `-signalcode`. Only has a meaning
 * after a call to [[subprocess.Subprocess#poll]],
 * [[subprocess.Subprocess#wait]] or [[subprocess.Subprocess#communicate]].
 **/

/**
 * subprocess.Subprocess#stdin -> io.Stream
 * 
 * Writeable [[io.Stream]] interface to stdin if pipe was opened.
 **/

/**
 * subprocess.Subprocess#stdout -> io.Stream
 * 
 * Readable [[io.Stream]] interface to stdout if pipe was opened.
 **/

/**
 * subprocess.Subprocess#stderr -> io.Stream
 * 
 * Readable [[io.Stream]] interface to stderr if pipe was opened.
 **/
