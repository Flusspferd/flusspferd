// vim:ts=2:sw=2:expandtab:autoindent:filetype=cpp:
/*
Copyright (c) 2008, 2009 Aristid Breitkreuz, Ash Berlin, Ruediger Sonderfeld

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/**
 * @page js-tutorial Using Flusspferd from Javascript
 *
 * It is possible to use Flusspferd without ever touching C++ - and even if
 * you do, you will probably use some of our Javascript-side features.
 *
 * @section Contents
 *
 * - @subpage js-tutorial-invoke
 * - @subpage js-tutorial-io
 * - @subpage js-tutorial-xml
 *
 * @see
 *   - @ref cpp-tutorial-modules
 */

/**
 * @page js-tutorial-invoke Using the Flusspferd shell / interpreter
 *
 * Once Flusspferd is @ref install "installed", you can run %flusspferd like
 * this:
 *
 * @verbatim
$ flusspferd
@endverbatim
 *
 * It will open up a shell. You can use it to evaluate arbitrary Javascript
 * expressions.
 *
 * @verbatim
> 1 + 1
2
> world = "Shell"; print("Hello", world);
Hello Shell
@endverbatim
 *
 * You can also invoke %flusspferd to run a Javascript file:
 *
 * @verbatim
$ flusspferd source.js
@endverbatim
 *
 * For more options, run <code>%flusspferd -h</code>.
 *
 * @section Command line arguments
 * Arguments given on the command line after the script name  are available as
 * a normal JavaScript array on the system module called @c args. For
 * example:
 *
 * @verbatim
#!/usr/bin/env flusspferd
function print_args(args) {
  // args.length is equivalent to argc in c
  print("There are", args.length, "argument(s)");

  for (var i=0; i<args.length; i++) {
    print(args[i]);
  }
}
var system = require('system');
print_args(system.args);

@endverbatim
 *
 * @section js-tutorial-emacs Using inferior-flusspferd-mode
 * Flusspferd comes with an
 * <a href="http://www.gnu.org/software/emacs/">Emacs</a> mode.
 * The Flusspferd mode can be used to interactively develop
 * javascript code by sending it to the Flusspferd shell.
 *
 * See \ref emacs-install "Emacs Mode install instructions"
 * on how to use it.
 *
 * Next: \ref js-tutorial-io
 *
 */

/**
 * @page js-tutorial-io Using IO
 *
 * Previous: \ref js-tutorial-invoke
 *
 * There is an I/O function that you have probably already encountered:
 * @c print.
 *
 * @verbatim
> print("OK: ", [1,2,3,4])
OK: 1 2 3 4
> require("system").stdout.print("Same.")
Same.
@endverbatim
 *
 * In fact, @c print is a short form for the latter syntax. However, the print
 * abbreviation is not available in modules. To spare you the hassle of typing
 * require("system").stdout.print everytime, you can assign the module to a
 * variable.
 *
 * @verbatim
const sys = require("system");
sys.stdout.print("Works!");
@endverbatim
 *
 * The other global function that is exposed as part of @c prelude.js is
 * @c readLine - which reads a line from standard input.
 *
 * @verbatim
> readLine().substr(1)
abcd
bcd
@endverbatim
 *
 * (Where @c abcd is input.)
 *
 * Again, @c readLine is just an alias for @c require("system").stdin.readLine.
 *
 * The @c system module exposes three streams by default:
 *
 * - @c stdin
 * - @c stdout
 * - @c stderr
 *
 * There are many more things that you can do with this and the 'io' module,
 * see <a href="js/IO">the documentation for <code>io</code></a>.
 *
 * Next: \ref js-tutorial-xml
 *
 */

/**
 * @page js-tutorial-xml Using XML
 *
 * Previous: \ref js-tutorial-io
 *
 * Let us begin by loading an XML document from Jeni Tennison's website:
 *
 * @verbatim
> XML = require("XML")
> doc = XML.parse("http://www.jenitennison.com/index.xml")
<?xml version="1.0" encoding="UTF-16"?>
<?xml-stylesheet type="text/xsl" href="resources/style/page.xsl"?>
<my:doc xmlns:my="http://www.jenitennison.com/" xmlns="http://www.w3.org/1999/xhtml" ...>
  ...
</my:doc>
@endverbatim
 *
 * @note You may notice the encoding of UTF-16 above, because @c doc.toString()
 *       (which is implicitly called here) converts to a Javascript string, and
 *       in Javascript, strings are encoded in UTF-16, internally.
 *
 * Now let's look at that document in a few basic ways.
 *
 * @verbatim
> doc.rootElement
ELEMENT:doc
> doc.rootElement.firstChild = null // => delete document contents
null
> doc
<?xml version="1.0" encoding="UTF-16"?>
<?xml-stylesheet type="text/xsl" href="resources/style/page.xsl"?>
<my:doc xmlns:my="http://www.jenitennison.com/" xmlns="http://www.w3.org/1999/xhtml" ... />
> doc.firstChild
PI:xml-stylesheet
> doc.type
DOCUMENT
@endverbatim
 *
 * Or, leveraging XPath:
 *
 * @verbatim
> doc = XML.parse("http://www.jenitennison.com/index.xml")
...
> xpath = new XML.XPath(doc, {my: "http://www.jenitennison.com/"})
[object NativeObject]
> xpath.ns.html = "http://www.w3.org/1999/xhtml" // now, namespaces html and my can be accessed
http://www.w3.org/1999/xhtml
> links = xpath("//my:links/my:link")
ELEMENT:link,ELEMENT:link,ELEMENT:link,ELEMENT:link
> links.forEach(function(x) { print(x.getAttribute("href"), x.content); })
www.w3.org/XML W3C XML Page
www.xml.com XML.com
www.xml.org XML.org from OASIS
www.bayes.co.uk/xml Chris Bayes' XML Portal
@endverbatim
 *
 * @note Reference documentation has not been written yet.
 *
 */
