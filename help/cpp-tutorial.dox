// vim:ts=2:sw=2:expandtab:autoindent:filetype=cpp:
/*
Copyright (c) 2008 Aristid Breitkreuz, Ruediger Sonderfeld, Ash Berlin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/**
 * @page cpp-tutorial Using Flusspferd from C++
 *
 * @section Contents
 *
 * - \subpage cpp-tutorial-firstprogram
 * - \subpage cpp-tutorial-values_and_objects
 * - \subpage cpp-tutorial-gc
 * - \subpage cpp-tutorial-functions
 * - \subpage cpp-tutorial-classes
 * - \subpage cpp-tutorial-modules
 *
 */

/**
 * @page cpp-tutorial-firstprogram Your first Flusspferd program
 *
 * Previous: \ref cpp-tutorial
 *
 * Let's begin with a very simple program, a version of "Hello World".
 *
 * @include first_program.cpp
 *
 * @note You can find the source file listed above in
 *       <code>help/examples/first_program.cpp</code>.
 *
 * In order to use Flusspferd, we need to create a
 * @ref flusspferd::context "context" and make it the <em>current context</em>,
 * which flusspferd::current_context_scope does as long it is in scope. You can
 * use flusspferd::current_context_scope in multiple nested scopes.
 *
 * @section compiling Compiling Flusspferd in your project
 *
 * Now that you've got a (very) simple project that uses Flusspferd, its time
 * to compile it.
 *
 * We assume that you have already @ref install "installed" Flusspferd. To use 
 * it in your project, you can use pkg-config, like this:
 *
 * @verbatim
$ g++ $(pkg-config --cflags --libs flusspferd) myfile.cpp
@endverbatim
 *
 * If you use <a href="http://code.google.com/p/waf">Waf</a>, you can use
 * Flusspferd by calling check_cfg on the configuration object:
 *
 * @verbatim
conf.check_cfg(
               package = 'flusspferd',
               uselib_store='FLUSSPFERD',
               args='--cflags --libs',
               mandatory=1)
@endverbatim
 *
 * Let's go with the simple method of shelling out to @c pkg-config for
 * now. We don't recommend that you use this method for any serious development,
 * but it has the advantage of being easy and quick.
 *
 * @verbatim
$ g++  $(pkg-config --cflags --libs flusspferd) -o first_program first_program.cpp >/dev/null
$ ./first_programm
Hello, Flusspferd!
$
@endverbatim
 *
 * If you see the output "Hello, Flusspferd!" and just get a shell back, then
 * everything worked. If either of the above commands produces any different
 * output, then something went wrong in the install proccess and most likely a
 * required file couldn't be found.
 *
 * Next: \ref cpp-tutorial-values_and_objects "Values and objects".
 */

/**
 * @page cpp-tutorial-values_and_objects Values and objects
 *
 * Previous: \ref cpp-tutorial-firstprogram
 *
 * Let's have a bird's-eye-view look at the basic value types supported by
 * Flusspferd. We shall create a few values of different types to get the hang
 * of it and we will also assert some basic facts about the values.
 *
 * @include values1.cpp
 *
 * @note The flusspferd::local_root_scope ensures that none of these objects
 *       will be destroyed by the garbage collector prematurely. But more about
 *       that in a later section.
 *
 * @note You can find the source in <code>help/examples/values1.cpp</code>.
 *
 * @section simple_objects Dealing with simple objects
 *
 * Let us translate this simple Javascript code to a C++ equivalent:
 *
 * @include simple_objects.js
 *
 * Translated to C++:
 *
 * @include simple_objects.cpp
 *
 * @note You can find the programs in
 *       <code>help/examples/simple_objects.js</code> and
 *       <code>simple_objects.cpp</code>.
 *
 * @section properties Objects and properties
 *
 * The class flusspferd::object (together with the other classes in 
 * @ref property_types) provides many methods for creating, accessing,
 * querying and manipulating properties. We will briefly look at some of them
 * here.
 *
 * For example, you can easily create a non-enumerable, read-only property:
 *
 * @code
obj.define_property("prop", initial_value,
  flusspferd::object::dont_enumerate | flusspferd::object::read_only_property);
@endcode
 *
 * Or, a property with a custom getter and setter:
 *
 * @code
flusspferd::property_attributes attr;
attr.getter = getter_function;
attr.setter = setter_function;
obj.define_property("prop", initial_value, attr);
@endcode
 *
 * @note Both @p getter_function and @p setter_function have to be of type
 *       flusspferd::function, which you can create with one of
 *       @ref create_function "these functions".
 *
 * And, among many other things, you can delete properties altogether:
 *
 * @code
obj.delete_property("prop");
@endcode
 *
 * Next: \ref cpp-tutorial-gc
 */

/**
 * @page cpp-tutorial-gc Garbage collection
 *
 * Previous: \ref cpp-tutorial-values_and_objects
 *
 * As you probably know, Javascript and its implementations rely on
 * <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">
 * garbage collection</a>. You can call the garbage collector explicity,
 * like this:
 *
 * @code
 * flusspferd::gc();
 * @endcode
 *
 * But Flusspferd or, rather, the underlying Javascript engine, will call the
 * garbage collector itself from time to time. Therefore, you need to protect
 * your objects and non-immediate values (@c undefined, @c null, boolean
 * values and small integer values are immediate) from garbage collection. You
 * can do so either by making sure they are <b>reachable</b>, for example by
 * making them a member of another "rooted" object, for example the global 
 * object, or by explicitly protecting them by making them root values. There
 * is also a third more advanced possibility that we won't cover now (see
 * flusspferd::tracer and flusspferd::native_object_base::trace).
 *
 * The simplest way to create rooted values is by creating a
 * flusspferd::local_root_scope. While it is in scope, all newly created
 * objects and non-immediate values will be root values. They will cease to be
 * root values once the local_root_scope is no longer in scope.
 *
 * @code
flusspferd::object o1 = flusspferd::create_object();

{
    flusspferd::local_root_scope scope;

    flusspferd::object o2 = flusspferd::create_object();

    flusspferd::gc();

    // o1 is probably deleted now, o2 is still alive.
}

flusspferd::gc();

// Now, o2 is probably deleted, too.
@endcode
 *
 * Alternatively, you can create root values directly:
 *
 * @code
 * flusspferd::root_value v;
 * flusspferd::root_string s;
 * ...
 * @endcode
 *
 * Next: \ref cpp-tutorial-functions
 */

/**
 * @page cpp-tutorial-functions Binding C++ functions
 *
 * Previous: \ref cpp-tutorial-gc
 *
 * An important use of Flusspferd is binding C++ functions so that they are
 * accessible from Javascript, for obvious reasons. Flusspferd provides
 * convenient methods for doing so.
 *
 * @include functions1.cpp
 *
 * @note You can find the source in <code>help/examples/functions1.cpp</code>.
 *
 * As you can see in the above example, you just declare your C++ functions
 * with the type you want and Flusspferd will deal with converting the
 * arguments  automaitically from the underlying types for you. The same goes
 * for the return values from your functions. If you've ever dealt with the
 * Spidermonkey API directly you'll know how much of a time saver this
 * behaviour is. (And in case you are wondering, this is achieved through C++
 * templates and boost meta-programming. Scary, scary meta-programming.)
 *
 * If this type coercion behaviour is counter to what you need for a particular
 * case, then you can get the raw arguments that your function was called with
 * by defining your function as returning <code>void</code> and taking a single
 * flusspferd::call_context argument:
 *
 * @code
void my_function(call_context &x) {
    // Result of the function is the number of arguments that it was called with
    x.result = x.args.size();

    if (x.args.size() > 1) {
      // Print the first argument (if there is one) to stdout
      cout << x.arg[0] << endl;
    }
}
@endcode
 *
 * @see @ref create_function
 *
 * Next: \ref cpp-tutorial-classes
 *
 */

/**
 * @page cpp-tutorial-classes Creating a Javascript class
 *
 * Previous: \ref cpp-tutorial-functions
 *
 * Other than functions, users of Flusspferd will likely want to create classes.
 *
 * As a simple example, we have chosen a "set of strings".
 *
 * A brief look at the whole program and then we shall look at it piece by
 * piece.
 *
 * @include "stringset.cpp"
 *
 * Let's begin the walk through. First, as always, the required headers.
 *
 * @dontinclude "stringset.cpp"
 *
 * @until <set>
 *
 * Our "set of strings" class needs to inherit from
 * flusspferd::native_object_base to be used from Javascript.
 *
 * @skip StringSet
 * @until public:
 *
 * Inside this class, we have to tell Flusspferd the name of the class'
 * constructor and the full identifying name of the class.
 *
 * @skip class_info
 * @until full_name
 *
 * As we intend to add our class methods to the prototype, we have to write
 * a function for creating the prototype.
 *
 * @skip create_prototype
 * @until create_object
 *
 * With @ref create_function "flusspferd::create_native_method etc." we can add
 * the methods to our prototype and return it.
 *
 * @skip create_native_method
 * @until }
 *
 * Below is the constructor that will be called from Javascript. Note that
 * the first parameter has to be passed to flusspferd::native_object_base.
 *
 * @skip StringSet
 * @until {
 *
 * Let us notify the user that the constructor has been called successfully.
 *
 * @skipline cout
 *
 * Now, we add the constructor parameters to the @c StringSet. To do so we
 * convert the flusspferd::value parameters to std::string (via
 * flusspferd::string).
 *
 * @skip for
 * @until }
 *
 * That's the whole constructor.
 *
 * @skipline }
 *
 * A few <code>typedef</code>s for the data types we use internally:
 *
 * @skip private
 * @until iterator
 *
 * The first three methods should be pretty straight-forward:
 *
 * @skip dump
 * @until delete_
 * @until }
 *
 * The method @c to_array (or rather, @c toArray, as seen from Javascript)
 * creates an array and calls @c Array.prototype.push to add each element
 * from the @c StringSet.
 *
 * @skip to_array
 * @until return
 * @until }
 *
 * The finish the implementation of @c StringSet, we need a @c std::set to
 * store the elements in.
 *
 * @skip private
 * @until };
 *
 * The print function simply prints its parameter.
 *
 * @skip print
 * @until }
 *
 * In @c main, we first create a flusspferd::context and then load the @c print
 * function.
 *
 * @skip main
 * @until print
 *
 * Now (<i>*drumrolls*</i>), we load the class @c StringSet into Flusspferd.
 *
 * @skipline load_class
 *
 * And finally, we'll use @c StringSet from Javascript.
 *
 * @skip evaluate
 * @until }
 *
 * That's it.
 *
 * @note You can find the program in <code>help/examples/stringset.cpp</code>.
 *
 * The output should be:
 *
 * @verbatim
Creating StringSet
Dumping StringSet: a,b,c,d
As Array: ["c", "d"]
Destroying StringSet
@endverbatim
 * 
 * Next: \ref cpp-tutorial-modules
 */

/**
 * @page cpp-tutorial-modules Using and writing loadable modules
 *
 * Previous: \ref cpp-tutorial-classes
 *
 * Loading a module - and using it - is easy:
 *
 * @verbatim
let posix = require('posix')
posix.sleep(5);
@endverbatim
 *
 * To load modules in directories that aren't searched by default, you
 * can do the following:
 *
 * @verbatim
require.paths.push('/my/directory');
require('somemodule');
@endverbatim
 *
 * And you can also write your own modules. Either by simply putting a file
 * named @c <module-name>.js in a directory in <code>$importer.paths</code> -
 * or, more relevant to this tutorial, by compiling a shared object or dynamic
 * library (the name pattern is lib<module-name>.so or lib<module-name>.dylib
 * there).
 *
 * @include "dummy_module.cpp"
 *
 * @note You can find this module in
 *       <code>help/examples/dummy_module.cpp</code>.
 *
 * If you compile this module as a shared library with the name
 * libdummy_module.so or libmodule_dummy.dylib, you should be able to load it
 * from the @c %flusspferd shell.
 *
 * @verbatim
> require.paths.push('/my/directory')
2
> require('dummy_module')
Module loaded!
[object Object]
> require('dummy_module')
[object Object]
@endverbatim
 *
 */
