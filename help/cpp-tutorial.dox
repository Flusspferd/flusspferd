// vim:ts=2:sw=2:expandtab:autoindent:filetype=cpp:
/*
Copyright (c) 2008 Aristid Breitkreuz, Ruediger Sonderfeld

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/**
 * @page cpp-tutorial Using Flusspferd from C++
 *
 * @section configuring Configuring Flusspferd in your project
 *
 * We assume that you have already @ref install "installed" Flusspferd. To use 
 * it in your project, you can use pkg-config, like this:
 *
 * @verbatim
$ g++ $(pkg-config --cflags --libs flusspferd) myfile.cpp
@endverbatim
 *
 * If you use <a href="http://code.google.com/p/waf">Waf</a>, you can use
 * Flusspferd by calling check_cfg on the configuration object:
 *
 * @verbatim
conf.check_cfg(
               package = 'flusspferd',
               uselib_store='FLUSSPFERD',
               args='--cflags --libs',
               mandatory=1)
@endverbatim
 *
 * @section firstprogram Your first Flusspferd program
 *
 * Let's begin with a very simple program that does, well, nothing.
 *
 * @code
 * #include <flusspferd/current_context_scope.hpp>
 * #include <flusspferd/context.hpp>
 *
 * int main() {
 *   flusspferd::current_context_scope context_scope(flusspferd::context::create());
 *   // Flusspferd is now initialized. Now we can do what we really want to do: nothing.
 * }
 * @endcode
 *
 * In order to use Flusspferd (even though we actually don't, in that simple
 * example), we need to create a @ref flusspferd::context "context" and make it
 * the <em>current context</em>, which flusspferd::current_context_scope does
 * as long it is in scope. You can use flusspferd::current_context_scope in
 * multiple nested scopes.
 *
 * @section secondprogram Your second Flusspferd program: Hello, World respectively Flusspferd.
 *
 * Which tutorial is complete without a "Hello, World!" example? But this one
 * comes with a twist.
 *
 * @code
 * #include <flusspferd/current_context_scope.hpp>
 * #include <flusspferd/context.hpp>
 * #include <flusspferd/init.hpp>
 * #include <flusspferd/root.hpp>
 * #include <flusspferd/string.hpp>
 * #include <flusspferd/value_io.hpp>
 * #include <flusspferd/evaluate.hpp>
 * #include <iostream>
 *
 * int main() {
 *   flusspferd::current_context_scope context_scope(flusspferd::context::create());
 *   flusspferd::root_string str("Hello, World!\n");
 *   flusspferd::gc(); // <- this line is not necessary - it calls the garbage collector
 *   flusspferd::global().set_property("str", str);
 *   std::cout << flusspferd::evaluate("str.replace('World', 'Flusspferd')");
 * }
 * @endcode
 * 
 * And this should be the output:
 *
 * @verbatim
Hello, Flusspferd!
@endverbatim
 *
 * At least \em slightly more interesting than "Hello, World!".
 */
