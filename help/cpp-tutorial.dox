// vim:ts=2:sw=2:expandtab:autoindent:filetype=cpp:
/*
Copyright (c) 2008 Aristid Breitkreuz, Ruediger Sonderfeld

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/**
 * @page cpp-tutorial Using Flusspferd from C++
 *
 * @section configuring Configuring Flusspferd in your project
 *
 * We assume that you have already @ref install "installed" Flusspferd. To use 
 * it in your project, you can use pkg-config, like this:
 *
 * @verbatim
$ g++ $(pkg-config --cflags --libs flusspferd) myfile.cpp
@endverbatim
 *
 * If you use <a href="http://code.google.com/p/waf">Waf</a>, you can use
 * Flusspferd by calling check_cfg on the configuration object:
 *
 * @verbatim
conf.check_cfg(
               package = 'flusspferd',
               uselib_store='FLUSSPFERD',
               args='--cflags --libs',
               mandatory=1)
@endverbatim
 *
 * @section firstprogram Your first Flusspferd program
 *
 * Let's begin with a very simple program that does, well, nothing.
 *
 * @code
 * #include <flusspferd/current_context_scope.hpp>
 * #include <flusspferd/context.hpp>
 *
 * int main() {
 *   flusspferd::current_context_scope context_scope(flusspferd::context::create());
 *   // Flusspferd is now initialized. Now we can do what we really want to do: nothing.
 * }
 * @endcode
 *
 * In order to use Flusspferd (even though we actually don't, in that simple
 * example), we need to create a @ref flusspferd::context "context" and make it
 * the <em>current context</em>, which flusspferd::current_context_scope does
 * as long it is in scope. You can use flusspferd::current_context_scope in
 * multiple nested scopes.
 *
 * @section secondprogram Your second Flusspferd program: Hello, World respectively Flusspferd.
 *
 * Which tutorial is complete without a "Hello, World!" example? But this one
 * comes with a twist.
 *
 * @code
#include <flusspferd/current_context_scope.hpp>
#include <flusspferd/context.hpp>
#include <flusspferd/init.hpp>
#include <flusspferd/root.hpp>
#include <flusspferd/string.hpp>
#include <flusspferd/value_io.hpp>
#include <flusspferd/evaluate.hpp>
#include <iostream>
#include <ostream>

int main() {
  flusspferd::current_context_scope context_scope(flusspferd::context::create());

  // Create a new string and protect it from the garbage collector by making it a root string.
  flusspferd::root_string str("Hello, World!\n");

  // Demonstrate that str will not be garbage collected, by calling the garbage collector.
  // Note that there is no other reason to call the garbage collector here.
  flusspferd::gc();

  // Set a property on the global object. Effectively, this creates a global variable "str" with the contents of str.
  flusspferd::global().set_property("str", str);

  // Print str on std::cout - but first, replace "World" by "Flusspferd".
  std::cout << flusspferd::evaluate("str.replace('World', 'Flusspferd')");
}
@endcode
 * 
 * And this should be the output:
 *
 * @verbatim
Hello, Flusspferd!
@endverbatim
 *
 * At least \em slightly more interesting than "Hello, World!".
 *
 * @section values_and_objects Values and objects
 *
 * Let's have a bird's eyes' look at the basic value types supported by
 * flusspferd.
 *
 * @code
 * #include <flusspferd/current_context_scope.hpp>
 * #include <flusspferd/context.hpp>
 * #include <flusspferd/init.hpp>
 * #include <flusspferd/value.hpp>
 * #include <flusspferd/object.hpp>
 * #include <flusspferd/local_root_scope.hpp>
 * #include <cassert>
 *
 * int main() {
 *   flusspferd::current_context_scope context_scope(flusspferd::context::create());
 *   flusspferd::local_root_scope root_scope;
 *
 *   // undefined
 *   flusspferd::value v1;
 *   assert(v1.is_undefined());
 *
 *   // boolean (true)
 *   flusspferd::value v2(true);
 *   assert(v2.is_boolean());
 *   assert(v2.get_boolean());
 *
 *   // integer (1)
 *   flusspferd::value v3(1);
 *   assert(v3.is_int());
 *   assert(v3.is_number());
 *   assert(v3.get_int() == 1);
 *
 *   // double (1.0)
 *   flusspferd::value v4(1.0);
 *   assert(v4.is_double());
 *   assert(v4.is_number());
 *   assert(v4.get_double() == 1.0);
 *
 *   // object (null)
 *   flusspferd::object o;
 *   assert(o.is_null());
 *   flusspferd::value v5(o);
 *   assert(v5.is_object());
 *   assert(v5.is_null());
 *
 *   // string (empty)
 *   flusspferd::string s; // <- valid (!), empty string
 *   assert(s.empty());
 *   flusspferd::value v6(s);
 *   assert(v6.is_string());
 * }
 * @endcode
 *
 * @note The flusspferd::local_root_scope ensures that none of these objects
 *       will be destroyed by the garbage collector prematurely. But more about
 *       that in a later section.
 *
 * 
 * @em TODO
 */
