// vim:ts=2:sw=2:expandtab:autoindent:filetype=cpp:
/*
Copyright (c) 2008 Aristid Breitkreuz, Ruediger Sonderfeld

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/**
 * @page cpp-tutorial Using Flusspferd from C++
 *
 * @section configuring Configuring Flusspferd in your project
 *
 * We assume that you have already @ref install "installed" Flusspferd. To use 
 * it in your project, you can use pkg-config, like this:
 *
 * @verbatim
$ g++ $(pkg-config --cflags --libs flusspferd) myfile.cpp
@endverbatim
 *
 * If you use <a href="http://code.google.com/p/waf">Waf</a>, you can use
 * Flusspferd by calling check_cfg on the configuration object:
 *
 * @verbatim
conf.check_cfg(
               package = 'flusspferd',
               uselib_store='FLUSSPFERD',
               args='--cflags --libs',
               mandatory=1)
@endverbatim
 *
 * @section firstprogram Your first Flusspferd program
 *
 * Let's begin with a very simple program that does, well, nothing.
 *
 * @include first_program.cpp
 *
 * In order to use Flusspferd (even though we actually don't, in that simple
 * example), we need to create a @ref flusspferd::context "context" and make it
 * the <em>current context</em>, which flusspferd::current_context_scope does
 * as long it is in scope. You can use flusspferd::current_context_scope in
 * multiple nested scopes.
 *
 * @section secondprogram Your second Flusspferd program: Hello, World respectively Flusspferd.
 *
 * Which tutorial is complete without a "Hello, World!" example? But this one
 * comes with a twist.
 *
 * @include second_program.cpp
 * 
 * And this should be the output:
 *
 * @verbatim
Hello, Flusspferd!
@endverbatim
 *
 * At least \em slightly more interesting than "Hello, World!".
 *
 * @section values_and_objects Values and objects
 *
 * Let's have a bird's eyes' look at the basic value types supported by
 * flusspferd. We shall just create a few values of different types to
 * get the hang of it. Also we will assert some basic facts about the values.
 *
 * @include values1.cpp
 *
 * @note The flusspferd::local_root_scope ensures that none of these objects
 *       will be destroyed by the garbage collector prematurely. But more about
 *       that in a later section.
 *
 * @subsection simple_objects Dealing with simple objects
 *
 * Let us translate this simple Javascript code to a C++ equivalent:
 *
 * @include simple_objects.js
 *
 * Translated to C++:
 *
 * @include simple_objects.cpp
 *
 * @section gc Garbage collection
 *
 * As you probably know, Javascript and its implementations rely on
 * <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">
 * garbage collection</a>. You can call the garbage collector explicity,
 * like this:
 *
 * @code
 * flusspferd::gc();
 * @endcode
 *
 * But Flusspferd or, rather, the underlying Javascript engine, will call the
 * garbage collector itself from time to time. Therefore, you need to protect
 * your objects and non-immediate values (@c undefined, @c null, boolean
 * values and small integer values are immediate) from garbage collection. You
 * can do so either by making sure they are <b>reachable</b>, for example by
 * making them a member of another "protected" object, for example the global 
 * object, or by explicitly protecting them by making them root values. There
 * is also a third possibility that we won't cover now (see flusspferd::tracer
 * and flusspferd::native_object_base::trace).
 *
 * You can create root values either by creating a flusspferd::local_root_scope
 * -- while it is in scope, all newly created objects and non-immediate values
 * will be root values. They will cease to be root values once it is no longer
 * in scope.
 *
 * @code
flusspferd::object o1 = flusspferd::create_object();

{
  flusspferd::local_root_scope scope;

  flusspferd::object o2 = flusspferd::create_object();

  flusspferd::gc();

  // o1 is probably deleted now, o2 is still alive.
}

flusspferd::gc();

// Now, o2 is probably deleted, too.
@endcode
 *
 * Alternatively, you can create root values directly:
 *
 * @code
 * flusspferd::root_value v;
 * flusspferd::root_string s;
 * ...
 * @endcode
 *
 * @section functions Binding C++ functions
 *
 * An important use of Flusspferd is binding C++ functions to Javascript, for
 * obvious reasons. Flusspferd provides convenient methods for doing so.
 *
 * @include functions1.cpp
 *
 * @see @ref create_function
 *
 * @section classes Creating a Javascript class
 *
 * Other than functions, users of flusspferd will likely want to create classes.
 *
 * As a simple example, we have chosen a "set of strings".
 *
 * @include "stringset.cpp"
 * 
 * @em TODO
 */
