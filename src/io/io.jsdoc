// vim: ft=cpp:foldmethod=marker:foldmarker={{{,}}}
/**
 * @namespace io related classes
 * @name io
 *
 * @see io.Stream
 * @see io.File
 * @see io.BinaryStream
 */

// io.Stream {{{
/**
 * Not actually a class, but an interface
 * @name io.Stream
 * @class
 * Interface for all io streams to follow
 */

// Stream instance methods {{{
/**#@+ @methodOf io.Stream# */

  /**
   * Read UTF-8 data. If the stream contains an invalid UTF-8 bye sequence, an
   * exception will be thrown.
   *
   * @name read
   * @type string
   *
   * @param [size=4096] number of bytes to read.
   */

  /**
   * Read binary data
   *
   * @name readBinary
   * @type Binary
   * @param [size=4096] number of bytes to read.
   * @param {ByteArray} [output] If defined/non-null, the output data will be appended to this ByteArray. Otherwise, a new ByteString will be created.
   */

  /**
   * Read a line from the stream
   *
   * @name readLine
   * @type string
   * @param [separator="\n"] The line separator to use.  Must be a single ASCII
   *                         character currently.
   */

  /**
   * Read entire stream as UTF-8 string
   *
   * @name readWhole
   * @type string
   */

  /**
   * Read entire stream contents as binary data.
   *
   * @name readWholeBinary
   * @type Binary
   * @param {ByteArray} [output] If defined/non-null, the output data will be appended to this ByteArray. Otherwise, a new ByteString will be created.
   */

  /**
   * Write either a string, in which case the UTF-8 byte sequence is
   * written, or else a Binary where the raw binary data is written.
   *
   * @name write
   *
   * @param data stringOrBinary
   */

  /**
   * Flush internal/OS buffers.
   * @name flush
   */

  /**
   * Print strings to this stream. This method converts each argument passed to
   * a string, writes them to the string with [[#fieldSeperator]] between
   * each one and [[#recordSeparator]] after the last one.
   *
   * <br /><br />
   *
   * @name print
   * @param ... values to print
   */

/**#@- }}} */

// Stream instance properties {{{
/**#@+ @fieldOf io.Stream# */

  /**
   * Printed between every argument to [[#print]].
   *
   * @name fieldSeperator
   * @default " "
   * @type string
   */

  /**
   * Printed at the end of each [[#print]] call.
   *
   * @name recordSeparator
   * @default "\n"
   * @type string
   */

  /**
   * Call flush after every write.
   *
   * @name autoFlush
   * @default false
   * @type boolean
   */

/**#@- }}} */

/// }}}
